/*
 * Copyright (C) 2017 gandji <gandji@free.fr>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gandji.mymoviedb.gui.widgets;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import org.gandji.mymoviedb.MyMovieDBPreferences;
import org.gandji.mymoviedb.data.Movie;
import org.gandji.mymoviedb.gui.InternetInfoSearchWorker;
import org.gandji.mymoviedb.gui.MovieDataModelText;
import org.gandji.mymoviedb.gui.MovieGuiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 *
 * @author gandji <gandji@free.fr>
 */
@Component
@Scope("prototype")
public class ResultChooserDialog extends javax.swing.JDialog implements ActionListener, TableModelListener {

    private static final Logger LOG = Logger.getLogger(ResultChooserDialog.class.getName());

    private Path filePath = null;
    private Movie selectedMovie = null;
    private InternetInfoSearchWorker internetInfoSearchWorker = null;

    // popup menu items
    private JMenuItem popupMenuItemOpenInfoUrl;

    private boolean cancelAll = false;
    private boolean cancel = false;
    private boolean Ok = false;
    private boolean enterMovieMyself = false;

    @Autowired
    private MovieGuiService movieGuiService;

    @Autowired
    private MyMovieDBPreferences myMovieDBPreferences;

    @Autowired
    private MovieDataModelText movieDataModelText;

    public void setLocalDb() {
        infoLabel.setText("Movies found in local DB, select the right movie in this list, or press cancel if none.");
    }
    
    public void setInternetMovieInfoSearching() {
        infoLabel.setText("The following movies were found on internet databases.\nPlease select the right movie or cancel if none suits: ");
    }

    public boolean isCancelAll() { return cancelAll; }

    public void setAllCancelled(boolean cancelAll) {
        this.cancelAll = cancelAll;
    }

    public boolean isCancel() { return cancel; }

    public void setCancel(boolean cancel) { this.cancel = cancel; }

    public boolean isOk() { return Ok; }

    public void setOk(boolean ok) { Ok = ok; }

    public boolean isEnterMovieMyself() { return enterMovieMyself; }

    public void setEnterMovieMyself(boolean enterMovieMyself) { this.enterMovieMyself = enterMovieMyself; }

    /**
     * Creates new form ResultChooserDialog
     */
    public ResultChooserDialog(NewLayout parent) {
        super(parent, "Choose film", true);
        initComponents();
        setInternetMovieInfoSearching();
    }

    @PostConstruct
    public void postConstruct() {

        JPopupMenu popupMenu = new JPopupMenu();
        popupMenuItemOpenInfoUrl = new JMenuItem("Open Internet Info page");
        popupMenu.add(popupMenuItemOpenInfoUrl);
        table.setComponentPopupMenu(popupMenu);

        popupMenuItemOpenInfoUrl.addActionListener(this);

        table.setModel(movieDataModelText);
        table.getModel().addTableModelListener(this);

        jScrollPane1.setViewportView(table);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        jLabel1 = new JLabel();
        fileNameDisplay = new JTextField();
        jScrollPane1 = new JScrollPane();
        table = new JTable();
        infoLabel = new JLabel();
        playFileButton = new JButton();
        cancelAllButton = new JButton();
        cancelButton = new JButton();
        stopButton = new JButton();
        okButton = new JButton();
        enterMovieMyselfButton = new JButton();

        //======== this ========
        setDefaultCloseOperation(2);
        Container contentPane = getContentPane();

        //---- jLabel1 ----
        jLabel1.setText("Select movie for file :");

        //---- playFileButton ----
        playFileButton.setText("play file");
        playFileButton.setFocusable(false);
        playFileButton.setHorizontalTextPosition(0);
        playFileButton.setVerticalTextPosition(3);
        playFileButton.addActionListener(e -> playFileButtonActionPerformed(e));

        //---- cancelAllButton ----
        cancelAllButton.setText("Cancel");
        cancelAllButton.setFocusable(false);
        cancelAllButton.setHorizontalTextPosition(0);
        cancelAllButton.setVerticalTextPosition(3);
        cancelAllButton.addActionListener(e -> cancelAllButtonActionPerformed(e));

        //---- cancelButton ----
        cancelButton.setText("Not in list");
        cancelButton.setFocusable(false);
        cancelButton.setHorizontalTextPosition(0);
        cancelButton.setVerticalTextPosition(3);
        cancelButton.addActionListener(e -> cancelButtonActionPerformed(e));

        //---- stopButton ----
        stopButton.setText("Stop");
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(0);
        stopButton.setVerticalTextPosition(3);
        stopButton.addActionListener(e -> stopButtonActionPerformed(e));

        //---- okButton ----
        okButton.setText("OK");
        okButton.setFocusable(false);
        okButton.setHorizontalTextPosition(0);
        okButton.setVerticalTextPosition(3);
        okButton.addActionListener(e -> okButtonActionPerformed(e));

        //---- enterMovieMyselfButton ----
        enterMovieMyselfButton.setText("Enter movie myself");
        enterMovieMyselfButton.addActionListener(e -> enterMovieMyselfButtonActionPerformed(e));

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 204, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fileNameDisplay))
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(infoLabel, GroupLayout.PREFERRED_SIZE, 560, GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(okButton)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(stopButton)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cancelButton)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cancelAllButton)
                            .addGap(18, 18, 18)
                            .addComponent(enterMovieMyselfButton)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playFileButton)))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileNameDisplay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(infoLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(cancelAllButton)
                        .addComponent(playFileButton)
                        .addComponent(cancelButton)
                        .addComponent(stopButton)
                        .addComponent(okButton)
                        .addComponent(enterMovieMyselfButton))
                    .addGap(30, 30, 30))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        setOk(true);
        setCancel(false);
        setAllCancelled(false);
        setEnterMovieMyself(false);

        selectedMovie = (Movie) table.getModel().getValueAt(table.getSelectedRow(), -1);
        if (null == selectedMovie) {
            String message = "Please select a movie or press cancel.";
            JOptionPane.showMessageDialog(new JFrame(), message, "Dialog",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (null == this.filePath) {
            String message = "Error: I have no file for this movie!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Dialog",
                    JOptionPane.ERROR_MESSAGE);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (null != internetInfoSearchWorker) {
            internetInfoSearchWorker.setCancelRequested(true);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        selectedMovie = null;
        setOk(false);
        setAllCancelled(false);
        setEnterMovieMyself(false);
        setCancel(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cancelAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAllButtonActionPerformed
        selectedMovie = null;
        setOk(false);
        setCancel(false);
        setEnterMovieMyself(false);
        setAllCancelled(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelAllButtonActionPerformed

    private void playFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playFileButtonActionPerformed
        Desktop dt = Desktop.getDesktop();
        try {
            dt.open(filePath.toFile());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Cannot open file " + filePath.getFileName() + "\n"
                    + "Make sure the file is there, and that it is associated to a video player.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_playFileButtonActionPerformed

    private void enterMovieMyselfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterMovieMyselfButtonActionPerformed
        setEnterMovieMyself(true);
        setOk(false);
        setCancel(false);
        setAllCancelled(false);
        setVisible(false);
        dispose();

    }//GEN-LAST:event_enterMovieMyselfButtonActionPerformed

    public void setMovies(List<Movie> movies) {
        movieDataModelText.setMovies(movies);
        movieDataModelText.fireTableDataChanged();
    }

    public void setPath(Path path) {
        filePath = path;
        fileNameDisplay.setText(path.getFileName().toString());
    }

    public void setInternetInfoSearchWorker(InternetInfoSearchWorker internetInfoSearchWorker) {
        this.internetInfoSearchWorker = internetInfoSearchWorker;
    }

    public Movie getSelectedMovie() {
        return selectedMovie;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JLabel jLabel1;
    private JTextField fileNameDisplay;
    private JScrollPane jScrollPane1;
    private JTable table;
    private JLabel infoLabel;
    private JButton playFileButton;
    private JButton cancelAllButton;
    private JButton cancelButton;
    private JButton stopButton;
    private JButton okButton;
    private JButton enterMovieMyselfButton;
    // End of variables declaration//GEN-END:variables

    public void addMovie(Movie movie) {
        movieDataModelText.addMovie(movie);
        movieDataModelText.fireTableDataChanged();
    }

    @Override
    public void tableChanged(TableModelEvent e) {
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        JMenuItem menu = (JMenuItem) event.getSource();
        if (menu != null) {
            if (menu == popupMenuItemOpenInfoUrl) {
                openInfo();
            }
        }
    }

    private void openInfo() {
        int selectedRow = table.convertRowIndexToModel(table.getSelectedRow());
        // get the movie, with the "-1" trick
        Movie movie = (Movie) table.getModel().getValueAt(selectedRow, -1);
        movieGuiService.openInfoUrl(movie.getInfoUrl());
    }
}
